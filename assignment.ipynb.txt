{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO/vKvtHVsiBV1zuZcVqB4e"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5HYBKNbNrx5c","executionInfo":{"status":"ok","timestamp":1753499146426,"user_tz":-330,"elapsed":175,"user":{"displayName":"Ilhaan Jidda","userId":"07688466631880896126"}},"outputId":"ffdfd5e5-fcb5-40f5-d8fb-d037f6ecadd4"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Result :\n"," [[ 58  64]\n"," [139 154]]\n"]}],"source":["import numpy as np\n","\n","def matrix_multiplication(A, B):\n","\n","  try:\n","    result = np.dot(A, B)\n","\n","    print(\"\\nResult :\\n\", result)\n","\n","    return result\n","\n","  except ValueError as e:\n","    print(f\"Error: {e}\")\n","    print(\"Matrix multiplication is not possible due to incompatible dimensions.\")\n","    return None\n","\n","A = np.array([[1, 2, 3],\n","              [4, 5, 6]])\n","\n","B = np.array([[7, 8],\n","              [9, 10],\n","              [11, 12]])\n","\n","result = matrix_multiplication(A, B)\n","\n","C = np.array([[1, 2],\n","              [3, 4]])\n","\n","D = np.array([[5, 6],\n","              [7, 8],\n","              [9, 10]])\n","\n","# matrix_multiplication(C, D) is not compatible"]},{"cell_type":"code","source":["import numpy as np\n","\n","data = np.array([10, 25, 40, 55, 70, 85, 100])\n","\n","\n","def min_max_scaling(data):\n","  min_val = np.min(data)\n","  max_val = np.max(data)\n","  scaled_data = (data - min_val) / (max_val - min_val)\n","  return scaled_data\n","\n","print(\"Original Data:\", data)\n","scaled_data = min_max_scaling(data)\n","print(\"Min-Max Scaled Data:\", scaled_data)\n","print(\"Min of scaled data:\", np.min(scaled_data))\n","print(\"Max of scaled data:\", np.max(scaled_data))\n","\n","def standardization(data):\n","  mean_val = np.mean(data)\n","  std_val = np.std(data)\n","  standardized_data = (data - mean_val) / std_val\n","  return standardized_data\n","\n","print(\"\\nOriginal Data:\", data)\n","standardized_data = standardization(data)\n","print(\"Standardized Data:\", standardized_data)\n","print(\"Mean of standardized data:\", np.mean(standardized_data))\n","print(\"Standard deviation of standardized data:\", np.std(standardized_data))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"titY2akptJuE","executionInfo":{"status":"ok","timestamp":1753499419149,"user_tz":-330,"elapsed":69,"user":{"displayName":"Ilhaan Jidda","userId":"07688466631880896126"}},"outputId":"54c5a9d6-9600-44da-fbf2-26af062d65ae"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Data: [ 10  25  40  55  70  85 100]\n","Min-Max Scaled Data: [0.         0.16666667 0.33333333 0.5        0.66666667 0.83333333\n"," 1.        ]\n","Min of scaled data: 0.0\n","Max of scaled data: 1.0\n","\n","Original Data: [ 10  25  40  55  70  85 100]\n","Standardized Data: [-1.5 -1.  -0.5  0.   0.5  1.   1.5]\n","Mean of standardized data: 0.0\n","Standard deviation of standardized data: 1.0\n"]}]}]}